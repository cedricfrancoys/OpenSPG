<?php

namespace ProducerBundle\Repository;

use UserBundle\Entity\User;

/**
 * VisitRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class VisitRepository extends \Doctrine\ORM\EntityRepository
{
	public function getVisitsForParticipant($participant)
	{
		return $this
            ->createQueryBuilder('v')
            ->leftJoin('v.Participants', 'p')
            ->where('p = :user')
            ->setParameter('user', $participant)
            ->getQuery()
            ->getResult();
	}

      public function getUpcoming()
      {
            return $this
            ->createQueryBuilder('v')
            ->where('v.visitDate IS NULL OR v.visitDate > :today')
            ->orderBy('v.visitDate', 'ASC')
            ->setParameter('today', new \DateTime())
            ->setMaxResults(10)
            ->getQuery()
            ->getResult()
        ;
      }

      public function getFiltered(User $currentMember, array $filter)
      {
            $sql = $this
                  ->createQueryBuilder('v')
                  ->select('v,p')
                  ->leftJoin('v.Producer', 'p')
                  ->leftJoin('p.User', 'u')
                  ->leftJoin('v.Property', 'pr')
                  ->andWhere('u.Node = :node')
                  ->setParameter('node', $currentMember->getNode())
            ;

            $filter = array_merge(
                array(
                    'producer' => 0,
                    'property' => 0
                ),
                $filter
            );
            if ($filter['producer']) {
                $sql->andWhere('u.id = :user')
                    ->setParameter('user', $filter['producer']);
            }
            if ($filter['property']) {
                $sql->andWhere('pr.id = :property')
                    ->setParameter('property', $filter['property']);
            }

            $query = $sql->getQuery();
            return $query->getResult();
      }
}
